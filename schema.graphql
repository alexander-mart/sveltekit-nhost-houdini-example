schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "todos"
  """
  delete_todos(
    """filter the rows which have to be deleted"""
    where: todos_bool_exp!
  ): todos_mutation_response

  """
  delete single row from the table: "todos"
  """
  delete_todos_by_pk(id: Int!): todos

  """
  insert data into the table: "todos"
  """
  insert_todos(
    """the rows to be inserted"""
    objects: [todos_insert_input!]!

    """upsert condition"""
    on_conflict: todos_on_conflict
  ): todos_mutation_response

  """
  insert a single row into the table: "todos"
  """
  insert_todos_one(
    """the row to be inserted"""
    object: todos_insert_input!

    """upsert condition"""
    on_conflict: todos_on_conflict
  ): todos

  """
  update data of the table: "todos"
  """
  update_todos(
    """sets the columns of the filtered rows to the given values"""
    _set: todos_set_input

    """filter the rows which have to be updated"""
    where: todos_bool_exp!
  ): todos_mutation_response

  """
  update single row of the table: "todos"
  """
  update_todos_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: todos_set_input
    pk_columns: todos_pk_columns_input!
  ): todos

  """
  update multiples rows of table: "todos"
  """
  update_todos_many(
    """updates to execute, in order"""
    updates: [todos_updates!]!
  ): [todos_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """An array relationship"""
  todos(
    """distinct select on columns"""
    distinct_on: [todos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todos_order_by!]

    """filter the rows returned"""
    where: todos_bool_exp
  ): [todos!]!

  """fetch data from the table: "todos" using primary key columns"""
  todos_by_pk(id: Int!): todos

  """
  fetch data from the table: "auth.users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
}

type subscription_root {
  """An array relationship"""
  todos(
    """distinct select on columns"""
    distinct_on: [todos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todos_order_by!]

    """filter the rows returned"""
    where: todos_bool_exp
  ): [todos!]!

  """fetch data from the table: "todos" using primary key columns"""
  todos_by_pk(id: Int!): todos

  """
  fetch data from the table in a streaming manner: "todos"
  """
  todos_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [todos_stream_cursor_input]!

    """filter the rows returned"""
    where: todos_bool_exp
  ): [todos!]!

  """
  fetch data from the table: "auth.users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch data from the table in a streaming manner: "auth.users"
  """
  users_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [users_stream_cursor_input]!

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
}

"""Very TODO table."""
type todos {
  description: String
  id: Int!
  is_completed: Boolean!
  title: String!

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
order by aggregate values of table "todos"
"""
input todos_aggregate_order_by {
  avg: todos_avg_order_by
  count: order_by
  max: todos_max_order_by
  min: todos_min_order_by
  stddev: todos_stddev_order_by
  stddev_pop: todos_stddev_pop_order_by
  stddev_samp: todos_stddev_samp_order_by
  sum: todos_sum_order_by
  var_pop: todos_var_pop_order_by
  var_samp: todos_var_samp_order_by
  variance: todos_variance_order_by
}

"""
order by avg() on columns of table "todos"
"""
input todos_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "todos". All fields are combined with a logical 'AND'.
"""
input todos_bool_exp {
  _and: [todos_bool_exp!]
  _not: todos_bool_exp
  _or: [todos_bool_exp!]
  description: String_comparison_exp
  id: Int_comparison_exp
  is_completed: Boolean_comparison_exp
  title: String_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "todos"
"""
enum todos_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  todos_pkey
}

"""
input type for inserting data into table "todos"
"""
input todos_insert_input {
  description: String
  is_completed: Boolean
  title: String
}

"""
order by max() on columns of table "todos"
"""
input todos_max_order_by {
  description: order_by
  id: order_by
  title: order_by
  user_id: order_by
}

"""
order by min() on columns of table "todos"
"""
input todos_min_order_by {
  description: order_by
  id: order_by
  title: order_by
  user_id: order_by
}

"""
response of any mutation on the table "todos"
"""
type todos_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [todos!]!
}

"""
on_conflict condition type for table "todos"
"""
input todos_on_conflict {
  constraint: todos_constraint!
  update_columns: [todos_update_column!]! = []
  where: todos_bool_exp
}

"""Ordering options when selecting data from "todos"."""
input todos_order_by {
  description: order_by
  id: order_by
  is_completed: order_by
  title: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: todos"""
input todos_pk_columns_input {
  id: Int!
}

"""
select columns of table "todos"
"""
enum todos_select_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  is_completed

  """column name"""
  title

  """column name"""
  user_id
}

"""
input type for updating data in table "todos"
"""
input todos_set_input {
  is_completed: Boolean
}

"""
order by stddev() on columns of table "todos"
"""
input todos_stddev_order_by {
  id: order_by
}

"""
order by stddev_pop() on columns of table "todos"
"""
input todos_stddev_pop_order_by {
  id: order_by
}

"""
order by stddev_samp() on columns of table "todos"
"""
input todos_stddev_samp_order_by {
  id: order_by
}

"""
Streaming cursor of the table "todos"
"""
input todos_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: todos_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input todos_stream_cursor_value_input {
  description: String
  id: Int
  is_completed: Boolean
  title: String
  user_id: uuid
}

"""
order by sum() on columns of table "todos"
"""
input todos_sum_order_by {
  id: order_by
}

"""
update columns of table "todos"
"""
enum todos_update_column {
  """column name"""
  is_completed
}

input todos_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: todos_set_input
  where: todos_bool_exp!
}

"""
order by var_pop() on columns of table "todos"
"""
input todos_var_pop_order_by {
  id: order_by
}

"""
order by var_samp() on columns of table "todos"
"""
input todos_var_samp_order_by {
  id: order_by
}

"""
order by variance() on columns of table "todos"
"""
input todos_variance_order_by {
  id: order_by
}

"""
User account information. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type users {
  avatarUrl: String!
  displayName: String!

  """An array relationship"""
  todos(
    """distinct select on columns"""
    distinct_on: [todos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todos_order_by!]

    """filter the rows returned"""
    where: todos_bool_exp
  ): [todos!]!
}

"""
Boolean expression to filter rows from the table "auth.users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  avatarUrl: String_comparison_exp
  displayName: String_comparison_exp
  todos: todos_bool_exp
}

"""Ordering options when selecting data from "auth.users"."""
input users_order_by {
  avatarUrl: order_by
  displayName: order_by
  todos_aggregate: todos_aggregate_order_by
}

"""
select columns of table "auth.users"
"""
enum users_select_column {
  """column name"""
  avatarUrl

  """column name"""
  displayName
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: users_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input users_stream_cursor_value_input {
  avatarUrl: String
  displayName: String
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
